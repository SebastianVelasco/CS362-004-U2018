        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <time.h>
        -:   10:
        -:   11:// Global Variables to Count Number of Failures
        -:   12:int handFailure, deckFailure, discardCardFails, 
        -:   13:    drawCardFails, cardEffectFails, passes;
        -:   14:
    10000:   15:void smithyRandomCheck(int player, struct gameState* state)
        -:   16:{
        -:   17:    int i,j,ret,s,t,u;
        -:   18:
        -:   19:    // Create and copy the gamestate that was passed in
        -:   20:    struct gameState before;
    10000:   21:    memcpy(&before,state,sizeof(struct gameState));
        -:   22:    // Get Values before continuing
    10000:   23:    int beforeDeckCount = before.deckCount[player];
    10000:   24:    int beforeHandCount = before.handCount[player]; // {DELETE} If issues, revert to pointer notation
    10000:   25:    int beforeDiscard = before.discardCount[player];
        -:   26:    
        -:   27:
        -:   28:    // Call the Smithy Card with no bonus
    10000:   29:    ret = cardEffect(smithy, 0,0,0,state,0,0);
        -:   30:
        -:   31:    // Manually Run Smithy Actions on copy of passed in game state
    10000:   32:    s = drawCard(player, &before);
    10000:   33:    t = drawCard(player, &before);
    10000:   34:    u = drawCard(player, &before);
        -:   35:
        -:   36:    // Dicard Card
    10000:   37:    j = discardCard(0, player, &before, 0);
        -:   38:
        -:   39:    // Get Values of deck post
    10000:   40:    int afterDeckCount = state->deckCount[player];
    10000:   41:    int afterHandCount = state->handCount[player]; // {DELETE} If issues, revert to pointer notation
    10000:   42:    int afterDiscard = state->discardCount[player];
        -:   43:
    10000:   44:    int passed = 1;
        -:   45:
        -:   46:    // Check Draw Card
    10000:   47:    if ((s == -1 || t == -1 || u == -1) && (before.deckCount != 0))
        -:   48:    {
    #####:   49:        drawCardFails++;
    #####:   50:        passed = 0;
        -:   51:    }
        -:   52:    // Check Card Effect && Discard Card
    10000:   53:    if(ret != 0)
        -:   54:    {
    #####:   55:        cardEffectFails++;
    #####:   56:        passed = 0;
        -:   57:    }
        -:   58:    // Discard Card Fails
    10000:   59:    if((j != 0) || (beforeDiscard != afterDiscard))
        -:   60:    {
       75:   61:        discardCardFails++;
       75:   62:        passed = 0;
        -:   63:    }
        -:   64:    // Deck Count
    10000:   65:    if (afterDeckCount != (beforeDeckCount))
        -:   66:    {
    10000:   67:        deckFailure++;
    10000:   68:        passed = 0;
        -:   69:    }
        -:   70:    // Check Hand
    10000:   71:    if (afterHandCount != (beforeHandCount))
        -:   72:    {
    10000:   73:        handFailure++;
    10000:   74:        passed = 0;
        -:   75:    }
        -:   76:    // Check Discard 
        -:   77:
        -:   78:    // Check if all passed
    10000:   79:    if (passed == 1)
        -:   80:    {
    #####:   81:        passes++;
        -:   82:    }
    10000:   83:}
        -:   84:
        1:   85:int main()
        -:   86:{
        1:   87:    printf("~~~~~~~~~~~~~~~~~~~~  RANDOM TEST  ~~~~~~~~~~~~~~~~~~~~\n");
        1:   88:    printf("Checking Smithy Card here\n");
        -:   89:
        -:   90:    // Set up variables
        -:   91:    int i, j, player;
        -:   92:    struct gameState G;
        -:   93:
        -:   94:    // Begin with random tests over 10000 random iterations
    10001:   95:    for(i = 0; i < 10000; i++)
        -:   96:    {
        -:   97:        // Fill gamestate G with random bytes
263010000:   98:        for (j = 0; j < sizeof(struct gameState); j++) 
        -:   99:        {
263000000:  100:            ((char*)&G)[j] = floor(Random() * 256);
        -:  101:        }
        -:  102:
        -:  103:        // Randomly generate a "Sane" gamestate
    10000:  104:        player = floor(Random() * MAX_PLAYERS);
    10000:  105:        G.deckCount[player] = floor(Random() * MAX_DECK);
    10000:  106:        G.discardCount[player] = floor(Random() * MAX_DECK);
    10000:  107:        G.handCount[player] = floor(Random() * MAX_HAND);
    10000:  108:        G.playedCardCount = floor(Random() * (MAX_DECK-1));
    10000:  109:        G.whoseTurn = player;
        -:  110:
        -:  111:        // Check Smithy Using the Function
    10000:  112:        smithyRandomCheck(player,&G);
        -:  113:    }
        -:  114:
        -:  115:    // END OF TESTING (upto 10000 * 3)
        1:  116:    int total_failures = handFailure + deckFailure + discardCardFails + drawCardFails + cardEffectFails;
        -:  117:
        1:  118:    printf("\n~~~~~~~~~~~~~~ RESULTS ~~~~~~~~~~~~~~~~~~~\n");
        1:  119:    printf("PASSED TESTS: %d\n",passes); // Means All tests passed the test
        1:  120:    printf("FAILED TESTS: %d\n",total_failures);
        -:  121:
        1:  122:    if (total_failures == 0) {
    #####:  123:        printf (" ~~~~~~~~~~~~~~~ PASSED ALL RANDOM TEST ~~~~~~~~~~~~~~~~\n\n");
        -:  124:    }
        -:  125:    else {
        1:  126:        printf("\n~~~~~~~~~~~~~~~~~ FAILURE REPORT ~~~~~~~~~~~~~~~~~~\n");
        1:  127:        printf("Discard failed: %d\n",discardCardFails);
        1:  128:        printf("Deck Count mismatch: %d\n",deckFailure);
        1:  129:        printf("Hand Count mismatch: %d\n",handFailure);
        1:  130:        printf("Draw Card Failures: %d\n",drawCardFails);
        1:  131:        printf("Card Effects Failures: %d\n",cardEffectFails);
        1:  132:        printf ("***** FAILED RANDOM TEST *****\n\n");
        -:  133:    }
        1:  134:    printf("~~~~~~~~~~~~~~~~~~~~  END OF RANDOM TEST  ~~~~~~~~~~~~~~~~~~~~\n");
        -:  135:
        1:  136:    printf("~~~~~~~~~~~~~~~~~~~~  COVERAGE  ~~~~~~~~~~~~~~~~~~~~\n\n");
        -:  137:}
