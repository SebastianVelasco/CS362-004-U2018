~~~~~~~~~~~~~~~~~~~~  RANDOM TEST  ~~~~~~~~~~~~~~~~~~~~
Checking Village Card here

~~~~~~~~~~~~~~ RESULTS ~~~~~~~~~~~~~~~~~~~
PASSED TESTS: 10000
FAILED TESTS: 0
 ~~~~~~~~~~~~~~~ PASSED ALL RANDOM TEST ~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~  END OF RANDOM TEST  ~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~  COVERAGE  ~~~~~~~~~~~~~~~~~~~~

Function 'main'
Lines executed:73.33% of 30
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:68.00% of 25

Function 'villageRandomCheck'
Lines executed:66.67% of 36
Branches executed:100.00% of 20
Taken at least once:50.00% of 20
Calls executed:100.00% of 3

File 'randomtestcard2.c'
Lines executed:69.70% of 66
Branches executed:100.00% of 26
Taken at least once:57.69% of 26
Calls executed:71.43% of 28
Creating 'randomtestcard2.c.gcov'

File '<built-in>'
No executable lines
No branches
No calls
Removing '<built-in>.gcov'

File 'dominion.c'
Lines executed:11.76% of 561
Creating 'dominion.c.gcov'

Lines executed:11.76% of 561
        -:    0:Source:dominion.c
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    63184:    8:int compare(const void* a, const void* b) {
    63184:    9:  if (*(int*)a > *(int*)b)
    32548:   10:    return 1;
    30636:   11:  if (*(int*)a < *(int*)b)
    30636:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;                        
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:              return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)               //loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)                           //loop chosen cards
        -:  109:        {
    #####:  110:          if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:              //check if card is a 'Victory' Kingdom card
    #####:  113:              if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
    #####:  115:                  if (numPlayers == 2){ 
    #####:  116:                    state->supplyCount[i] = 8; 
        -:  117:                  }
    #####:  118:                  else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:              else
        -:  121:                {
    #####:  122:                  state->supplyCount[i] = 10;
        -:  123:                }
    #####:  124:              break;
        -:  125:            }
        -:  126:          else    //card is not in the set choosen for the game
        -:  127:            {
    #####:  128:              state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:        {
    #####:  143:          state->deck[i][j] = estate;
    #####:  144:          state->deckCount[i]++;
        -:  145:        }
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:        {
    #####:  148:          state->deck[i][j] = copper;
    #####:  149:          state->deckCount[i]++;                
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:          return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //        {
        -:  171:      //          drawCard(i, state);
        -:  172:      //        }
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
       38:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       38:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       38:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       38:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     9244:  214:  while (state->deckCount[player] > 0) {
     9168:  215:    card = floor(Random() * state->deckCount[player]);
     9168:  216:    newDeck[newDeckPos] = state->deck[player][card];
     9168:  217:    newDeckPos++;
   708398:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   699230:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     9168:  221:    state->deckCount[player]--;
        -:  222:  }
     9206:  223:  for (i = 0; i < newDeckPos; i++) {
     9168:  224:    state->deck[player][i] = newDeck[i];
     9168:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       38:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{        
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0;                 //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:        
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:        
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:        
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:        
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:        
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:        
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    10000:  346:int whoseTurn(struct gameState *state) {
    10000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:        
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:          j++;
        -:  407:        }
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;        
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:          players[i] = -9999;
        -:  470:        }
        -:  471:      else
        -:  472:        {
    #####:  473:          players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:        {
    #####:  483:          j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:          players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:          j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:        {
    #####:  514:          players[i] = 1;
        -:  515:        }
        -:  516:      else
        -:  517:        {
    #####:  518:          players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    20000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{        int count;
        -:  527:  int deckCounter;
    20000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     9206:  533:    for (i = 0; i < state->discardCount[player];i++){
     9168:  534:      state->deck[player][i] = state->discard[player][i];
     9168:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       38:  538:    state->deckCount[player] = state->discardCount[player];
       38:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       38:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       38:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       38:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       38:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       38:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       38:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       38:  563:    state->deckCount[player]--;
       38:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    19962:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    19962:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    19962:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    19962:  576:    state->deckCount[player]--;
    19962:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    20000:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:        
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    10000:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    10000:  653:  int currentPlayer = whoseTurn(state);
    10000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    10000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:
    10000:  659:  if (nextPlayer > (state->numPlayers - 1)){
     4997:  660:    nextPlayer = 0;
        -:  661:  }
        -:  662:  
        -:  663:  //uses switch to select card and perform actions
    10000:  664:  switch( card ) 
        -:  665:    {
        -:  666:    case adventurer:
    #####:  667:      return adventurerEffect(state);
        -:  668:    case council_room:
        -:  669:      //+4 Cards
    #####:  670:      for (i = 0; i < 4; i++)
        -:  671:        {
    #####:  672:          drawCard(currentPlayer, state);
        -:  673:        }
        -:  674:                        
        -:  675:      //+1 Buy
    #####:  676:      state->numBuys++;
        -:  677:                        
        -:  678:      //Each other player draws a card
    #####:  679:      for (i = 0; i < state->numPlayers; i++)
        -:  680:        {
    #####:  681:          if ( i != currentPlayer )
        -:  682:            {
    #####:  683:              drawCard(i, state);
        -:  684:            }
        -:  685:        }
        -:  686:                        
        -:  687:      //put played card in played card pile
    #####:  688:      discardCard(handPos, currentPlayer, state, 0);
        -:  689:                        
    #####:  690:      return 0;
        -:  691:                        
        -:  692:    case feast:
        -:  693:      //gain card with cost up to 5
        -:  694:      //Backup hand
    #####:  695:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  696:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  697:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  698:      }
        -:  699:      //Backup hand
        -:  700:
        -:  701:      //Update Coins for Buy
    #####:  702:      updateCoins(currentPlayer, state, 5);
    #####:  703:      x = 1;//Condition to loop on
    #####:  704:      while( x == 1) {//Buy one card
    #####:  705:        if (supplyCount(choice1, state) <= 0){
        -:  706:          if (DEBUG)
        -:  707:            printf("None of that card left, sorry!\n");
        -:  708:
        -:  709:          if (DEBUG){
        -:  710:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  711:          }
        -:  712:        }
    #####:  713:        else if (state->coins < getCost(choice1)){
    #####:  714:          printf("That card is too expensive!\n");
        -:  715:
        -:  716:          if (DEBUG){
        -:  717:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  718:          }
        -:  719:        }
        -:  720:        else{
        -:  721:
        -:  722:          if (DEBUG){
        -:  723:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  724:          }
        -:  725:
    #####:  726:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  727:          x = 0;//No more buying cards
        -:  728:
        -:  729:          if (DEBUG){
        -:  730:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  731:          }
        -:  732:
        -:  733:        }
        -:  734:      }     
        -:  735:
        -:  736:      //Reset Hand
    #####:  737:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  738:        state->hand[currentPlayer][i] = temphand[i];
    #####:  739:        temphand[i] = -1;
        -:  740:      }
        -:  741:      //Reset Hand
        -:  742:                              
    #####:  743:      return 0;
        -:  744:                        
        -:  745:    case gardens:
    #####:  746:      return gardensEffect();
        -:  747:    case mine:
    #####:  748:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  749:
    #####:  750:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  751:        {
    #####:  752:          return -1;
        -:  753:        }
        -:  754:                
    #####:  755:      if (choice2 > treasure_map || choice2 < curse)
        -:  756:        {
    #####:  757:          return -1;
        -:  758:        }
        -:  759:
    #####:  760:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  761:        {
    #####:  762:          return -1;
        -:  763:        }
        -:  764:
    #####:  765:      gainCard(choice2, state, 2, currentPlayer);
        -:  766:
        -:  767:      //discard card from hand
    #####:  768:      discardCard(handPos, currentPlayer, state, 0);
        -:  769:
        -:  770:      //discard trashed card
    #####:  771:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  772:        {
    #####:  773:          if (state->hand[currentPlayer][i] == j)
        -:  774:            {
    #####:  775:              discardCard(i, currentPlayer, state, 0);                        
    #####:  776:              break;
        -:  777:            }
        -:  778:        }
        -:  779:                        
    #####:  780:      return 0;
        -:  781:                        
        -:  782:    case remodel:
    #####:  783:      return remodelEffect(choice1, choice2, state, handPos);
        -:  784:    case smithy:
    #####:  785:      return smithyEffect(state, handPos);
        -:  786:    case village:
        -:  787:      //+1 Card
    10000:  788:      drawCard(currentPlayer, state);
        -:  789:                        
        -:  790:      //+2 Actions
    10000:  791:      state->numActions = state->numActions + 2;
        -:  792:                        
        -:  793:      //discard played card from hand
    10000:  794:      discardCard(handPos, currentPlayer, state, 0);
    10000:  795:      return 0;
        -:  796:                
        -:  797:    case baron:
    #####:  798:      state->numBuys++;//Increase buys by 1!
    #####:  799:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  800:        int p = 0;//Iterator for hand!
    #####:  801:        int card_not_discarded = 1;//Flag for discard set!
    #####:  802:        while(card_not_discarded){
    #####:  803:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  804:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  805:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  806:            state->discardCount[currentPlayer]++;
    #####:  807:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  808:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  809:            }
    #####:  810:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  811:            state->handCount[currentPlayer]--;
    #####:  812:            card_not_discarded = 0;//Exit the loop
        -:  813:          }
    #####:  814:          else if (p > state->handCount[currentPlayer]){
        -:  815:            if(DEBUG) {
        -:  816:              printf("No estate cards in your hand, invalid choice\n");
        -:  817:              printf("Must gain an estate if there are any\n");
        -:  818:            }
    #####:  819:            if (supplyCount(estate, state) > 0){
    #####:  820:              gainCard(estate, state, 0, currentPlayer);
    #####:  821:              state->supplyCount[estate]--;//Decrement estates
    #####:  822:              if (supplyCount(estate, state) == 0){
    #####:  823:                isGameOver(state);
        -:  824:              }
        -:  825:            }
    #####:  826:            card_not_discarded = 0;//Exit the loop
        -:  827:          }
        -:  828:                            
        -:  829:          else{
    #####:  830:            p++;//Next card
        -:  831:          }
        -:  832:        }
        -:  833:      }
        -:  834:                            
        -:  835:      else{
    #####:  836:        if (supplyCount(estate, state) > 0){
    #####:  837:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  838:          state->supplyCount[estate]--;//Decrement Estates
    #####:  839:          if (supplyCount(estate, state) == 0){
    #####:  840:            isGameOver(state);
        -:  841:          }
        -:  842:        }
        -:  843:      }
        -:  844:            
        -:  845:      
    #####:  846:      return 0;
        -:  847:                
        -:  848:    case great_hall:
        -:  849:      //+1 Card
    #####:  850:      drawCard(currentPlayer, state);
        -:  851:                        
        -:  852:      //+1 Actions
    #####:  853:      state->numActions++;
        -:  854:                        
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
    #####:  857:      return 0;
        -:  858:                
        -:  859:    case minion:
    #####:  860:      return minionEffect(choice1, choice2, state, handPos);
        -:  861:    case steward:
    #####:  862:      if (choice1 == 1)
        -:  863:        {
        -:  864:          //+2 cards
    #####:  865:          drawCard(currentPlayer, state);
    #####:  866:          drawCard(currentPlayer, state);
        -:  867:        }
    #####:  868:      else if (choice1 == 2)
        -:  869:        {
        -:  870:          //+2 coins
    #####:  871:          state->coins = state->coins + 2;
        -:  872:        }
        -:  873:      else
        -:  874:        {
        -:  875:          //trash 2 cards in hand
    #####:  876:          discardCard(choice2, currentPlayer, state, 1);
    #####:  877:          discardCard(choice3, currentPlayer, state, 1);
        -:  878:        }
        -:  879:                        
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
    #####:  882:      return 0;
        -:  883:                
        -:  884:    case tribute:
    #####:  885:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  886:        if (state->deckCount[nextPlayer] > 0){
    #####:  887:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  888:          state->deckCount[nextPlayer]--;
        -:  889:        }
    #####:  890:        else if (state->discardCount[nextPlayer] > 0){
    #####:  891:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  892:          state->discardCount[nextPlayer]--;
        -:  893:        }
        -:  894:        else{
        -:  895:          //No Card to Reveal
        -:  896:          if (DEBUG){
        -:  897:            printf("No cards to reveal\n");
        -:  898:          }
        -:  899:        }
        -:  900:      }
        -:  901:            
        -:  902:      else{
    #####:  903:        if (state->deckCount[nextPlayer] == 0){
    #####:  904:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  905:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  906:            state->deckCount[nextPlayer]++;
    #####:  907:            state->discard[nextPlayer][i] = -1;
    #####:  908:            state->discardCount[nextPlayer]--;
        -:  909:          }
        -:  910:                            
    #####:  911:          shuffle(nextPlayer,state);//Shuffle the deck
        -:  912:        } 
    #####:  913:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:        state->deckCount[nextPlayer]--;
    #####:  916:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:        state->deckCount[nextPlayer]--;
        -:  919:      }    
        -:  920:                       
    #####:  921:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  922:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  923:        state->playedCardCount++;
    #####:  924:        tributeRevealedCards[1] = -1;
        -:  925:      }
        -:  926:
    #####:  927:      for (i = 0; i <= 2; i ++){
    #####:  928:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  929:          state->coins += 2;
        -:  930:        }
        -:  931:                    
    #####:  932:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  933:          drawCard(currentPlayer, state);
    #####:  934:          drawCard(currentPlayer, state);
        -:  935:        }
        -:  936:        else{//Action Card
    #####:  937:          state->numActions = state->numActions + 2;
        -:  938:        }
        -:  939:      }
        -:  940:            
    #####:  941:      return 0;
        -:  942:                
        -:  943:    case ambassador:
    #####:  944:      j = 0;                //used to check if player has enough cards to discard
        -:  945:
    #####:  946:      if (choice2 > 2 || choice2 < 0)
        -:  947:        {
    #####:  948:          return -1;                                
        -:  949:        }
        -:  950:
    #####:  951:      if (choice1 == handPos)
        -:  952:        {
    #####:  953:          return -1;
        -:  954:        }
        -:  955:
    #####:  956:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  957:        {
    #####:  958:          if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  959:            {
    #####:  960:              j++;
        -:  961:            }
        -:  962:        }
    #####:  963:      if (j < choice2)
        -:  964:        {
    #####:  965:          return -1;                                
        -:  966:        }
        -:  967:
        -:  968:      if (DEBUG) 
        -:  969:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  970:
        -:  971:      //increase supply count for choosen card by amount being discarded
    #####:  972:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  973:                        
        -:  974:      //each other player gains a copy of revealed card
    #####:  975:      for (i = 0; i < state->numPlayers; i++)
        -:  976:        {
    #####:  977:          if (i != currentPlayer)
        -:  978:            {
    #####:  979:              gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  980:            }
        -:  981:        }
        -:  982:
        -:  983:      //discard played card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);                        
        -:  985:
        -:  986:      //trash copies of cards returned to supply
    #####:  987:      for (j = 0; j < choice2; j++)
        -:  988:        {
    #####:  989:          for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  990:            {
    #####:  991:              if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  992:                {
    #####:  993:                  discardCard(i, currentPlayer, state, 1);
    #####:  994:                  break;
        -:  995:                }
        -:  996:            }
        -:  997:        }                        
        -:  998:
    #####:  999:      return 0;
        -: 1000:                
        -: 1001:    case cutpurse:
        -: 1002:
    #####: 1003:      updateCoins(currentPlayer, state, 2);
    #####: 1004:      for (i = 0; i < state->numPlayers; i++)
        -: 1005:        {
    #####: 1006:          if (i != currentPlayer)
        -: 1007:            {
    #####: 1008:              for (j = 0; j < state->handCount[i]; j++)
        -: 1009:                {
    #####: 1010:                  if (state->hand[i][j] == copper)
        -: 1011:                    {
    #####: 1012:                      discardCard(j, i, state, 0);
    #####: 1013:                      break;
        -: 1014:                    }
    #####: 1015:                  if (j == state->handCount[i])
        -: 1016:                    {
    #####: 1017:                      for (k = 0; k < state->handCount[i]; k++)
        -: 1018:                        {
        -: 1019:                          if (DEBUG)
        -: 1020:                            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1021:                        }        
    #####: 1022:                      break;
        -: 1023:                    }                
        -: 1024:                }
        -: 1025:                                        
        -: 1026:            }
        -: 1027:                                
        -: 1028:        }                                
        -: 1029:
        -: 1030:      //discard played card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);                        
        -: 1032:
    #####: 1033:      return 0;
        -: 1034:
        -: 1035:                
        -: 1036:    case embargo: 
        -: 1037:      //+2 Coins
    #####: 1038:      state->coins = state->coins + 2;
        -: 1039:                        
        -: 1040:      //see if selected pile is in play
    #####: 1041:      if ( state->supplyCount[choice1] == -1 )
        -: 1042:        {
    #####: 1043:          return -1;
        -: 1044:        }
        -: 1045:                        
        -: 1046:      //add embargo token to selected supply pile
    #####: 1047:      state->embargoTokens[choice1]++;
        -: 1048:                        
        -: 1049:      //trash card
    #####: 1050:      discardCard(handPos, currentPlayer, state, 1);                
    #####: 1051:      return 0;
        -: 1052:                
        -: 1053:    case outpost:
        -: 1054:      //set outpost flag
    #####: 1055:      state->outpostPlayed++;
        -: 1056:                        
        -: 1057:      //discard card
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1059:      return 0;
        -: 1060:                
        -: 1061:    case salvager:
        -: 1062:      //+1 buy
    #####: 1063:      state->numBuys++;
        -: 1064:                        
    #####: 1065:      if (choice1)
        -: 1066:        {
        -: 1067:          //gain coins equal to trashed card
    #####: 1068:          state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1069:          //trash card
    #####: 1070:          discardCard(choice1, currentPlayer, state, 1);        
        -: 1071:        }
        -: 1072:                        
        -: 1073:      //discard card
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1075:      return 0;
        -: 1076:                
        -: 1077:    case sea_hag:
    #####: 1078:      for (i = 0; i < state->numPlayers; i++){
    #####: 1079:        if (i != currentPlayer){
    #####: 1080:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];                            state->deckCount[i]--;
    #####: 1081:          state->discardCount[i]++;
    #####: 1082:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1083:        }
        -: 1084:      }
    #####: 1085:      return 0;
        -: 1086:                
        -: 1087:    case treasure_map:
        -: 1088:      //search hand for another treasure_map
    #####: 1089:      index = -1;
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:        {
    #####: 1092:          if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1093:            {
    #####: 1094:              index = i;
    #####: 1095:              break;
        -: 1096:            }
        -: 1097:        }
    #####: 1098:      if (index > -1)
        -: 1099:        {
        -: 1100:          //trash both treasure cards
    #####: 1101:          discardCard(handPos, currentPlayer, state, 1);
    #####: 1102:          discardCard(index, currentPlayer, state, 1);
        -: 1103:
        -: 1104:          //gain 4 Gold cards
    #####: 1105:          for (i = 0; i < 4; i++)
        -: 1106:            {
    #####: 1107:              gainCard(gold, state, 1, currentPlayer);
        -: 1108:            }
        -: 1109:                                
        -: 1110:          //return success
    #####: 1111:          return 1;
        -: 1112:        }
        -: 1113:                        
        -: 1114:      //no second treasure_map found in hand
    #####: 1115:      return -1;
        -: 1116:    }
        -: 1117:        
    #####: 1118:  return -1;
        -: 1119:}
        -: 1120:
    20000: 1121:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1122:{
        -: 1123:        
        -: 1124:  //if card is not trashed, added to Played pile 
    20000: 1125:  if (trashFlag < 1)
        -: 1126:    {
        -: 1127:      //add card to played pile
    20000: 1128:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    20000: 1129:      state->playedCardCount++;
        -: 1130:    }
        -: 1131:        
        -: 1132:  //set played card to -1
    20000: 1133:  state->hand[currentPlayer][handPos] = -1;
        -: 1134:        
        -: 1135:  //remove card from player's hand
    20000: 1136:  if ( handPos == (state->handCount[currentPlayer] - 1) )         //last card in hand array is played
        -: 1137:    {
        -: 1138:      //reduce number of cards in hand
       36: 1139:      state->handCount[currentPlayer]--;
        -: 1140:    }
    19964: 1141:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1142:    {
        -: 1143:      //reduce number of cards in hand
    #####: 1144:      state->handCount[currentPlayer]--;
        -: 1145:    }
        -: 1146:  else         
        -: 1147:    {
        -: 1148:      //replace discarded card with last card in hand
    19964: 1149:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1150:      //set last card to -1
    19964: 1151:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1152:      //reduce number of cards in hand
    19964: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
        -: 1155:        
    20000: 1156:  return 0;
        -: 1157:}
        -: 1158:
    #####: 1159:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1160:{
        -: 1161:  //Note: supplyPos is enum of choosen card
        -: 1162:        
        -: 1163:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1164:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1165:    {
    #####: 1166:      return -1;
        -: 1167:    }
        -: 1168:        
        -: 1169:  //added card for [whoseTurn] current player:
        -: 1170:  // toFlag = 0 : add to discard
        -: 1171:  // toFlag = 1 : add to deck
        -: 1172:  // toFlag = 2 : add to hand
        -: 1173:
    #####: 1174:  if (toFlag == 1)
        -: 1175:    {
    #####: 1176:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1177:      state->deckCount[player]++;
        -: 1178:    }
    #####: 1179:  else if (toFlag == 2)
        -: 1180:    {
    #####: 1181:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1182:      state->handCount[player]++;
        -: 1183:    }
        -: 1184:  else
        -: 1185:    {
    #####: 1186:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1187:      state->discardCount[player]++;
        -: 1188:    }
        -: 1189:        
        -: 1190:  //decrease number in supply pile
    #####: 1191:  state->supplyCount[supplyPos]--;
        -: 1192:         
    #####: 1193:  return 0;
        -: 1194:}
        -: 1195:
    #####: 1196:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1197:{
        -: 1198:  int i;
        -: 1199:        
        -: 1200:  //reset coin count
    #####: 1201:  state->coins = 0;
        -: 1202:
        -: 1203:  //add coins for each Treasure card in player's hand
    #####: 1204:  for (i = 0; i < state->handCount[player]; i++)
        -: 1205:    {
    #####: 1206:      if (state->hand[player][i] == copper)
        -: 1207:        {
    #####: 1208:          state->coins += 1;
        -: 1209:        }
    #####: 1210:      else if (state->hand[player][i] == silver)
        -: 1211:        {
    #####: 1212:          state->coins += 2;
        -: 1213:        }
    #####: 1214:      else if (state->hand[player][i] == gold)
        -: 1215:        {
    #####: 1216:          state->coins += 3;
        -: 1217:        }        
        -: 1218:    }        
        -: 1219:
        -: 1220:  //add bonus
    #####: 1221:  state->coins += bonus;
        -: 1222:
    #####: 1223:  return 0;
        -: 1224:}
        -: 1225:
    #####: 1226:int adventurerEffect(struct gameState *state)
        -: 1227:{
    #####: 1228:  int drawntreasure = 0;
        -: 1229:  int cardDrawn;
    #####: 1230:  int currentPlayer = whoseTurn(state);
        -: 1231:  int temphand[MAX_HAND];
        -: 1232:  // this is the counter for the temp hand
    #####: 1233:  int z = 0;
        -: 1234:
    #####: 1235:  while(drawntreasure < 2) {
        -: 1236:    // if the deck is empty we need to shuffle discard and add to deck
    #####: 1237:    if (state->deckCount[currentPlayer] < 1) {
    #####: 1238:      shuffle(currentPlayer, state);
        -: 1239:    }
        -: 1240:
    #####: 1241:    drawCard(currentPlayer, state);
        -: 1242:
        -: 1243:    // top card of hand is most recently drawn card
    #####: 1244:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1245:
    #####: 1246:    if (cardDrawn == copper || cardDrawn == silver/* || cardDrawn == gold*/) { // BUG: Gold doesn't count as treasure.
    #####: 1247:      drawntreasure++;
        -: 1248:    } else {
    #####: 1249:      temphand[z]=cardDrawn;
        -: 1250:      // this should just remove the top card (the most recently drawn one)
    #####: 1251:      state->handCount[currentPlayer]--;
    #####: 1252:      z++;
        -: 1253:    }
        -: 1254:  }
        -: 1255:
    #####: 1256:  while(z-1 >= 0) {
        -: 1257:    // discard all cards in play that have been drawn
    #####: 1258:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1];
    #####: 1259:    z--;
        -: 1260:  }
        -: 1261:
    #####: 1262:  return 0;
        -: 1263:}
        -: 1264:
    #####: 1265:int gardensEffect()
        -: 1266:{
    #####: 1267:  return -1;
        -: 1268:}
        -: 1269:
    #####: 1270:int minionEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1271:{
        -: 1272:  int i;
        -: 1273:  int j;
    #####: 1274:  int currentPlayer = whoseTurn(state);
        -: 1275:
        -: 1276:  // +1 action
        -: 1277:  // state->numActions++; // BUG: +0 action instead of +1
        -: 1278:
        -: 1279:  // discard card from hand
    #####: 1280:  discardCard(handPos, currentPlayer, state, 0);
        -: 1281:
    #####: 1282:  if (choice1) {
        -: 1283:    // +2 coins
    #####: 1284:    state->coins = state->coins + 2;
    #####: 1285:  } else if (choice2) {
        -: 1286:    // discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1287:
        -: 1288:    // discard hand
    #####: 1289:    while(numHandCards(state) > 0) {
    #####: 1290:      discardCard(handPos, currentPlayer, state, 0);
        -: 1291:    }
        -: 1292:
        -: 1293:    // draw 4
    #####: 1294:    for (i = 0; i < 4; i++) {
    #####: 1295:      drawCard(currentPlayer, state);
        -: 1296:    }
        -: 1297:
        -: 1298:    // other players discard hand and redraw if hand size > 4
    #####: 1299:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1300:      if (i != currentPlayer) {
    #####: 1301:        if (state->handCount[i] > 3) { // BUG: other players discard if and size > 3 instead of > 4
        -: 1302:          //discard hand
    #####: 1303:          while(state->handCount[i] > 0) {
    #####: 1304:            discardCard(handPos, i, state, 0);
        -: 1305:          }
        -: 1306:          // draw 4
    #####: 1307:          for (j = 0; j < 4; j++) {
    #####: 1308:            drawCard(i, state);
        -: 1309:          }
        -: 1310:        }
        -: 1311:      }
        -: 1312:    }
        -: 1313:  }
        -: 1314:
    #####: 1315:  return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:int remodelEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1319:{
        -: 1320:  int i;
        -: 1321:  int j;
    #####: 1322:  int currentPlayer = whoseTurn(state);
        -: 1323:
        -: 1324:  // store card we will trash
    #####: 1325:  j = state->hand[currentPlayer][choice1];
        -: 1326:
    #####: 1327:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1328:    {
    #####: 1329:      return -1;
        -: 1330:    }
        -: 1331:
    #####: 1332:  gainCard(choice2, state, 0, currentPlayer);
        -: 1333:
        -: 1334:  // discard card from hand
    #####: 1335:  discardCard(handPos, currentPlayer, state, 0);
        -: 1336:
        -: 1337:  // discard trashed card
    #####: 1338:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1339:    {
    #####: 1340:      if (state->hand[currentPlayer][i] == j)
        -: 1341:        {
    #####: 1342:          discardCard(i-1, currentPlayer, state, 0); // BUG: Wrong card is trashed.
    #####: 1343:          break;
        -: 1344:        }
        -: 1345:    }
        -: 1346:
    #####: 1347:  return 0;
        -: 1348:}
        -: 1349:
    #####: 1350:int smithyEffect(struct gameState *state, int handPos)
        -: 1351:{
        -: 1352:  int i;
    #####: 1353:  int currentPlayer = whoseTurn(state);
        -: 1354:
        -: 1355:  // +3 Cards
    #####: 1356:  for (i = 0; i < 4; i++) { // BUG: +4 cards instead of +3.
    #####: 1357:    drawCard(currentPlayer, state);
        -: 1358:  }
        -: 1359:
        -: 1360:  // discard card from hand
    #####: 1361:  discardCard(handPos, currentPlayer, state, 0);
        -: 1362:
    #####: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366://end of dominion.c
